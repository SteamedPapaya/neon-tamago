name: Deploy Spring Boot App to EC2 using Docker

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build

      # Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t neon-tamago:latest .

      # .env 파일을 EC2로 전송
      - name: Copy .env file to EC2
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ".env"
          target: "~/spring-app/.env"

      # Docker Compose 파일을 EC2로 전송
      - name: Copy Docker Compose to EC2
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml"
          target: "~/spring-app/"

      # SSH로 EC2에 접속하여 Docker Compose 실행
      - name: SSH and deploy with Docker Compose
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            ssh -o StrictHostKeyChecking=no -tt ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
              # Docker Compose로 애플리케이션 재실행
              cd ~/spring-app/
              docker-compose down
              docker-compose up -d --build
            EOF